#define function buyTickets(uint256) payable returns()
#define function currEndTime() view returns()
#define function currPrice() view returns()
#define function claim() nonpayable returns()
//getter functions

#define constant END_TIME = FREE_STORAGE_POINTER()
#define constant START_TIME = FREE_STORAGE_POINTER()
//block.timestamp to lock the contract
#define constant OWNER = FREE_STORAGE_POINTER()
#define constant TOTAL_TIX = FREE_STORAGE_POINTER()
#define constant CURR_PRICE = FREE_STORAGE_POINTER()
#define constant OWNER_TO_NUM_OF_TIX = FREE_STORAGE_POINTER()
#define constant OWNER_TO_AMOUNT_OWED = FREE_STORAGE_POINTER()
#define constant LAST_PURCHASER = FREE_STORAGE_POINTER()

//event sigs
//tix bought

#define macro CONTSTRUCTOR() = takes (0) returns (0) {
    //give initial tix price in wei
    //set owner
    //maybe send owner shit ton of tix or let owner get their own pot
    //or none of the above
    //end time = 24h hours from curr blocktimestamp
}

#define macro BUY_TIX() = takes (0) returns(0) {
    //[CURR_PRICE] sload  // if it gonna revert and they waste gas its not my problem
    //check if timer over
    [END_TIME] sload // use for later when updating end time
    timestamp
    dup2    // [end time, curr timestamp, end time, curr price]
    gt
    time_not_over jumpi
    //if timer over, then revert
    selfbalance//idk how to distribute last ticket here
    revert //are the 0x00's even necessary? no

    time_not_over:
    //update time first because it at top of stack
    // [end time, curr price]

    [CURR_PRICE] sload //dup2 not necessart as i believe curr price is completely recalcuated from scratch
    callvalue div   // [callvalue / current ticket price]
    // we keep the change to save gas and cuz we cool like that
    // [num of tix bought, end time, curr price]
    
    0x3e    // [30s, num of tix bought, end, curr price]
    mul     // [30s * num of tix bought, end time, curr price]
    add     // [amount to increase by + end time, curr price]
    [END_TIME] sstore   // stored new end time
    // [amount of tix bought]



    caller //msg.sender
    0x00 mstore
    //somehow sha3 into the mapping key idk

    //update owner to num of tix



    UPDATE_CURR_PRICE() //macro needs # of tix bought and 
    //distribute funds
    //adds time to end time
    //updates every current ticket buyers 

}

#define macro UPDATE_CURR_PRICE() = takes (2) returns(0) {
    //takes amount of tix bought and updates current price
    //simple math i hope
}

#define macro UPDATE_END_TIME() = takes (1) returns(0) {
    //need to check if current endtime <= block.timestamp + 24h

    0x3e    // [tix bought, 30]
    mul     // [tix bought * 30]
    [END_TIME] sload    // [end time, amount it should increase by]
    add     // [end time + amount it should increase by]
    0x15180 // [24h, current endtime]


}


#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xe0 shr
    dup1 /* */ eq buyTickets jumpi

    buyTickets:
        BUY_TIX()

}